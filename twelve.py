# coding:utf-8

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors

def findDivisor(n):
    return filter(lambda x:n%x==0,[i for i in xrange(1,int(n**0.5))])

# print(findFactors(21))

def getTriangular(n):
    # return reduce(lambda x,y:x+y,[i for i in xrange(1,n+1)])
    return sum([i for i in xrange(1,n+1)])

# print(getTriangular(7))

def getHighlyDivisorTriangular(n):
    i = 1
    DivisorNumber = 1
    while DivisorNumber < int(n/2):
        print i
        print DivisorNumber
        DivisorNumber = len(findDivisor(getTriangular(i)))
        i += 1
    return getTriangular(i-1)

print(getHighlyDivisorTriangular(500))
